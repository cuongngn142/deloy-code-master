<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Gi·∫£i B√†i T·∫≠p | Code Master</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/solve.css" />
    <!-- Monaco Editor CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.30.1/min/vs/loader.min.js"></script>
  </head>
  <body data-user-id="<%= user ? user.id : 0 %>">

    <main class="solve-main">
      <div class="main-content">
        <div class="problem-section">
          <h1><%= baiTap.TieuDe %></h1>
          <div class="problem-meta">
            <span class="difficulty">
              <strong>ƒê·ªô kh√≥:</strong> <%= baiTap.MucDoKho %>
            </span>
            <span class="topic">
              <strong>Ch·ªß ƒë·ªÅ:</strong> <%= baiTap.TenChuDe %>
            </span>
          </div>
          <div class="problem-description">
            <strong>M√¥ t·∫£ b√†i t·∫≠p:</strong> <%= baiTap.MoTa %>
          </div>
        </div>

        <div class="code-section">
          <div class="code-header">
            <select id="language">
              <% ngonNgu.forEach(function(lang) { %>
              <option value="<%= lang.TenNgonNgu.toLowerCase() %>">
                <%= lang.TenNgonNgu %>
              </option>
              <% }); %>
            </select>
            <button id="runBtn">Ch·∫°y th·ª≠</button>
            <button id="submitBtn">N·ªôp b√†i</button>
          </div>
          <div id="editor" style="height: 400px; border: 1px solid #ccc"></div>
          <div id="result" class="hidden" style="margin-top: 15px">
            <h3>K·∫øt qu·∫£:</h3>
            <div
              class="result-content"
              style="
                white-space: pre-wrap;
                background: #222;
                color: #eee;
                padding: 10px;
                border-radius: 5px;
              "
            ></div>
          </div>
        </div>
      </div>
    </main>

    <script>
      // H√†m chu·∫©n h√≥a newline th√†nh \n v√† trim kho·∫£ng tr·∫Øng 2 ƒë·∫ßu
      function normalizeNewlines(str) {
        return str.replace(/\r\n/g, "\n").trim();
      }

      // Monaco Editor setup
      require.config({
        paths: {
          vs: "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.30.1/min/vs",
        },
      });

      let editor;

      require(["vs/editor/editor.main"], function () {
        editor = monaco.editor.create(document.getElementById("editor"), {
          value: "// Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y\n",
          language: "javascript",
          theme: "vs-dark",
          automaticLayout: true,
        });

        // Ch·∫°y th·ª≠ khi b·∫•m n√∫t
        document.getElementById("runBtn").addEventListener("click", runCode);
        // N·ªôp b√†i
        document
          .getElementById("submitBtn")
          .addEventListener("click", submitCheck);
      });

      async function runCode() {
        if (!editor) {
          alert("Editor ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o");
          return;
        }

        const code = editor.getValue();
        const language = document.getElementById("language").value;
        let version = "";

        switch (language) {
          case "javascript":
          case "nodejs":
            version = "18.15.0";
            break;
          case "python":
          case "python3":
          case "py":
          case "py3":
            version = "3.10.0";
            break;
          case "java":
            version = "15.0.2";
            break;
          default:
            version = "*";
            break;
        }

        try {
          const res = await fetch("https://emkc.org/api/v2/piston/execute", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              language,
              version,
              files: [{ name: "main", content: code }],
            }),
          });

          const result = await res.json();

          const resultDiv = document.getElementById("result");
          resultDiv.classList.remove("hidden");

          if (result.error) {
            resultDiv.querySelector(".result-content").textContent =
              result.error;
          } else {
            resultDiv.querySelector(".result-content").textContent =
              result.run.stdout || "Kh√¥ng c√≥ output";
          }
        } catch (error) {
          alert("L·ªói khi ch·∫°y code: " + error.message);
        }
      }

      async function submitCheck() {
        const resultDiv = document.getElementById("result");
        if (resultDiv.classList.contains("hidden")) {
          alert("B·∫°n ch∆∞a ch·∫°y th·ª≠ code, vui l√≤ng b·∫•m 'Ch·∫°y th·ª≠' tr∆∞·ªõc.");
          return;
        }

        let userOutput = normalizeNewlines(
          resultDiv.querySelector(".result-content").textContent
        );

        if (!userOutput) {
          alert("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ƒë·∫ßu ra, vui l√≤ng ch·∫°y th·ª≠ l·∫°i.");
          return;
        }

        const maBaiTap = "<%= baiTap.MaBaiTap %>";
        const maNguoiDung = document.body.getAttribute("data-user-id");
        const maNgonNgu = document.getElementById("language").value;

        try {
          const res = await fetch(`/api/testcases/${maBaiTap}`);
          if (!res.ok) throw new Error("L·ªói l·∫•y test cases");
          const testCases = await res.json();

          let matchedTestCase = null;

          for (const testCase of testCases) {
            const expectedOutput = normalizeNewlines(testCase.DauRaMongDoi);
            const kieuDuLieu = testCase.KieuDuLieu.toLowerCase();

            let userOutputFormat, expectedOutputFormat;
            let isMatch = false;

            switch (kieuDuLieu) {
              case "string":
                // So s√°nh chu·ªói trim 2 ƒë·∫ßu
                userOutputFormat = userOutput.trim();
                expectedOutputFormat = expectedOutput.trim();
                isMatch = userOutputFormat === expectedOutputFormat;
                break;

              case "number":
                // Chuy·ªÉn sang number r·ªìi so s√°nh
                userOutputFormat = Number(userOutput);
                expectedOutputFormat = Number(expectedOutput);
                isMatch = userOutputFormat === expectedOutputFormat;
                break;

              case "boolean":
                // Chuy·ªÉn sang boolean r·ªìi so s√°nh
                try {
                  userOutputFormat = JSON.parse(userOutput.toLowerCase());
                  expectedOutputFormat = JSON.parse(
                    expectedOutput.toLowerCase()
                  );
                  isMatch = userOutputFormat === expectedOutputFormat;
                } catch {
                  isMatch = false;
                }
                break;

              case "array":
              case "object":
                // JSON.parse r·ªìi so s√°nh chu·ªói JSON
                try {
                  userOutputFormat = JSON.parse(userOutput);
                  expectedOutputFormat = JSON.parse(expectedOutput);
                  isMatch =
                    JSON.stringify(userOutputFormat) ===
                    JSON.stringify(expectedOutputFormat);
                } catch {
                  isMatch = false;
                }
                break;

              default:
                // M·∫∑c ƒë·ªãnh so s√°nh chu·ªói b√¨nh th∆∞·ªùng
                isMatch = userOutput === expectedOutput;
                break;
            }

            if (isMatch) {
              matchedTestCase = testCase;
              break;
            }
          }

          if (matchedTestCase) {
            alert("üéâ Pass! B·∫°n ƒë√£ ƒë·∫°t y√™u c·∫ßu b√†i t·∫≠p.");

            // G·ª≠i k·∫øt qu·∫£ test case (l∆∞u tr·ª±c ti·∫øp v√†o KetQuaBaiNop)
            const saveRes = await fetch("/api/solve/saveResult", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                MaBaiTap: maBaiTap,
                MaNguoiDung: maNguoiDung,
                MaNgonNgu: maNgonNgu,
                MaTest: matchedTestCase.MaTest,
                DauRaThucTe: userOutput,
                DatYeuCau: 1, // true = pass
                Diem: 10,
              }),
            });

            const saveData = await saveRes.json();

            if (saveData.success) {
              alert("‚úÖ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
            } else {
              alert("‚ùå L·ªói khi l∆∞u k·∫øt qu·∫£.");
            }
          } else {
            alert("‚ùå Ch∆∞a ƒë√∫ng, vui l√≤ng ki·ªÉm tra l·∫°i ƒë·∫ßu ra.");
          }
        } catch (err) {
          console.error(err);
          alert("C√≥ l·ªói x·∫£y ra khi ki·ªÉm tra b√†i.");
        }
      }
    </script>
  </body>
</html>
