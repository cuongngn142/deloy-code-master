<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- reset css -->
    <link rel="stylesheet" href="/css/reset.css" />
    <!-- embed fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
        href="https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Poppins:ital,wght@0,400;0,500;0,600;0,700;1,400&family=Sen:wght@700&display=swap"
        rel="stylesheet" />
    <link rel="icon" href="/images/img/logo-web.png" type="image/png" />

    <link rel="stylesheet" href="/css/reset.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/practice.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <title>Chi Tiết Bài Học | Code Master</title>

    <style>
        .pdf-preview {
            width: 100%;
            height: 800px;
            border: none;
            margin-top: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .download-btn {
            background: #27ae60;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .download-btn:hover {
            background: #219a52;
        }

        .no-pdf {
            margin: 20px 0;
            padding: 15px;
            background: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 6px;
            text-align: center;
        }

        /* Markdown styling */
        .rendered-content {
            background: #ffffff;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
            line-height: 1.7;
            font-family: 'Be Vietnam Pro', sans-serif;
        }

        .rendered-content h1 {
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
            margin-bottom: 25px;
            font-size: 2.2em;
            font-weight: 700;
        }

        .rendered-content h2 {
            color: #34495e;
            border-bottom: 2px solid #ecf0f1;
            padding-bottom: 8px;
            margin-top: 30px;
            margin-bottom: 20px;
            font-size: 1.8em;
            font-weight: 600;
        }

        .rendered-content h3 {
            color: #34495e;
            margin-top: 25px;
            margin-bottom: 15px;
            font-size: 1.4em;
            font-weight: 600;
        }

        .rendered-content h4, .rendered-content h5, .rendered-content h6 {
            color: #34495e;
            margin-top: 20px;
            margin-bottom: 10px;
            font-weight: 600;
        }

        .rendered-content p {
            margin-bottom: 16px;
            text-align: justify;
            color: #2c3e50;
        }

        .rendered-content ul, .rendered-content ol {
            margin-bottom: 16px;
            padding-left: 30px;
        }

        .rendered-content li {
            margin-bottom: 8px;
            color: #2c3e50;
        }

        .rendered-content code {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            color: #e74c3c;
            font-size: 0.9em;
        }

        .rendered-content pre {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            overflow-x: auto;
            margin: 20px 0;
            border-left: 4px solid #3498db;
        }

        .rendered-content pre code {
            background: transparent;
            color: #ecf0f1 !important;
            padding: 0;
            font-size: 0.9em;
        }

        /* Fix for syntax highlighting in code blocks */
        .rendered-content pre code * {
            color: inherit !important;
        }

        /* Specific highlighting colors for better readability */
        .rendered-content pre .hljs-keyword {
            color: #f92672 !important;
        }

        .rendered-content pre .hljs-string {
            color: #a6e22e !important;
        }

        .rendered-content pre .hljs-comment {
            color: #75715e !important;
            font-style: italic;
        }

        .rendered-content pre .hljs-number {
            color: #ae81ff !important;
        }

        .rendered-content pre .hljs-function {
            color: #66d9ef !important;
        }

        .rendered-content pre .hljs-variable {
            color: #fd971f !important;
        }

        .rendered-content pre .hljs-operator {
            color: #f92672 !important;
        }

        .rendered-content pre .hljs-punctuation {
            color: #ecf0f1 !important;
        }

        .rendered-content blockquote {
            border-left: 4px solid #3498db;
            background: #f8f9fa;
            margin: 20px 0;
            padding: 15px 20px;
            font-style: italic;
            color: #555;
        }

        .rendered-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: #fff;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .rendered-content th, .rendered-content td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ecf0f1;
        }

        .rendered-content th {
            background: #3498db;
            color: white;
            font-weight: 600;
        }

        .rendered-content tr:hover {
            background: #f8f9fa;
        }

        .rendered-content a {
            color: #3498db;
            text-decoration: none;
            border-bottom: 1px dotted #3498db;
        }

        .rendered-content a:hover {
            color: #2980b9;
            border-bottom: 1px solid #2980b9;
        }

        .rendered-content img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            margin: 20px 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .rendered-content hr {
            border: none;
            height: 2px;
            background: linear-gradient(to right, #3498db, #transparent);
            margin: 30px 0;
        }

        /* Improved styling for converted content */
        .converted-content {
            margin-top: 20px;
        }

        .panel-content {
            background: transparent;
        }

        /* Mobile responsive */
        @media (max-width: 768px) {
            .rendered-content {
                padding: 20px;
            }
            
            .rendered-content h1 {
                font-size: 1.8em;
            }
            
            .rendered-content h2 {
                font-size: 1.5em;
            }
            
            .rendered-content h3 {
                font-size: 1.3em;
            }
            
            .rendered-content pre {
                padding: 15px;
                font-size: 0.85em;
            }
            
            .rendered-content table {
                font-size: 0.9em;
            }
            
            .rendered-content th, .rendered-content td {
                padding: 8px 10px;
            }
        }

        /* Highlight.js custom styling */
        .hljs {
            background: #2c3e50 !important;
            color: #ecf0f1 !important;
        }

        /* Markdown Editor Styling */
        .markdown-editor-container {
            margin-top: 20px;
        }

        .editor-controls {
            margin-bottom: 15px;
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .editor-tabs {
            display: flex;
            background: #f8f9fa;
            border-radius: 8px;
            padding: 4px;
            margin-bottom: 10px;
        }

        .tab-btn {
            padding: 8px 16px;
            border: none;
            background: transparent;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
        }

        .tab-btn.active {
            background: #3498db;
            color: white;
        }

        .tab-btn:hover {
            background: #e9ecef;
        }

        .tab-btn.active:hover {
            background: #2980b9;
        }

        .markdown-textarea {
            width: 100%;
            min-height: 400px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            resize: vertical;
            background: #f8f9fa;
        }

        .markdown-textarea:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .editor-preview {
            display: none;
        }

        .editor-preview.active {
            display: block;
        }

        .editor-source {
            display: block;
        }

        .editor-source.hidden {
            display: none;
        }

        .save-btn {
            background: #27ae60;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .save-btn:hover {
            background: #219a52;
        }

        .save-btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
        }

        .cancel-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .cancel-btn:hover {
            background: #c0392b;
        }
    </style>
</head>

<body>
    <header class="header fixed"><%- include('partials/header') %></header>

    <main class="practice-main">
        <div class="main-content">
            <div class="practice-details">
                
                <a href="/learning" class="back-btn"><i class="fas fa-arrow-left"></i> Quay lại</a>
                <h1 class="practice-title">
                    <%= lesson.TieuDe %>
                </h1>

                <div class="practice-meta">
                    <span><i class="far fa-calendar-alt"></i> Cập nhật: <%= new Date(lesson.NgayCapNhat).toLocaleDateString('vi-VN') %></span>
                    <span><i class="far fa-user"></i> Tác giả: <%= lesson.TenNguoiTao || 'Admin' %></span>
                    <% if (lesson.NgonNguLapTrinh) { %>
                        <span><i class="fas fa-code"></i> <%= lesson.NgonNguLapTrinh %></span>
                    <% } %>
                </div>

                <div class="practice-content">
                    <h2>Mô tả</h2>
                    <p class="practice-description">
                        <%= lesson.MoTa || 'Không có mô tả chi tiết cho bài học này.' %>
                    </p>
                </div>
                
                <% if (lesson.DuongDanFile) { %>
                <div class="pdf-converter">
                    <div class="pdf-actions">
                        <a href="<%= lesson.DuongDanFile %>" class="download-btn" download>
                            <i class="fas fa-download"></i> Tải xuống tài liệu (<%= lesson.DuongDanFile.split('.').pop().toUpperCase() %>)
                        </a>
                    </div>
                    
                    <% 
                        const fileExt = lesson.DuongDanFile.split('.').pop().toLowerCase();
                        const previewableFormats = ['pdf', 'md', 'txt'];
                        const imageFormats = ['jpg', 'jpeg', 'png', 'gif'];
                        const videoFormats = ['mp4', 'avi'];
                    %>
                    
                    <% if (fileExt === 'pdf') { %>
                        <iframe class="pdf-preview" src="<%= lesson.DuongDanFile %>#toolbar=0"></iframe>
                    <% } else if (fileExt === 'md') { %>
                        <div class="markdown-editor-container">
                            <% if (user && user.vaiTro === 'Admin') { %>
                            <div class="editor-controls">
                                <button id="editBtn" class="save-btn">
                                    <i class="fas fa-edit"></i> Chỉnh sửa Markdown
                                </button>
                            </div>
                            <% } %>
                            
                            <div id="markdownEditor" style="display: none;">
                                <div class="editor-tabs">
                                    <button class="tab-btn active" data-tab="source">
                                        <i class="fas fa-code"></i> Source
                                    </button>
                                    <button class="tab-btn" data-tab="preview">
                                        <i class="fas fa-eye"></i> Preview
                                    </button>
                                </div>
                                
                                <div id="editorSource" class="editor-source">
                                    <textarea id="markdownTextarea" class="markdown-textarea" placeholder="Nhập nội dung Markdown..."></textarea>
                                </div>
                                
                                <div id="editorPreview" class="editor-preview">
                                    <div class="rendered-content" id="livePreview"></div>
                                </div>
                                
                                <div class="editor-controls" style="margin-top: 15px;">
                                    <button id="saveBtn" class="save-btn">
                                        <i class="fas fa-save"></i> Lưu thay đổi
                                    </button>
                                    <button id="cancelBtn" class="cancel-btn">
                                        <i class="fas fa-times"></i> Hủy
                                    </button>
                                </div>
                            </div>
                            
                            <div class="converted-content" id="markdownDisplay">
                                <div class="panel-content">
                                    <div class="rendered-content" id="renderedContent"></div>
                                </div>
                            </div>
                        </div>
                        
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.3.0/marked.min.js"></script>
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
                        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/atom-one-dark.min.css">
                        <script>
                            let currentMarkdownContent = '';
                            let isEditing = false;
                            
                            // Cấu hình marked với highlight.js
                            marked.setOptions({
                                highlight: function(code, lang) {
                                    if (lang && hljs.getLanguage(lang)) {
                                        try {
                                            return hljs.highlight(code, { language: lang }).value;
                                        } catch (err) {}
                                    }
                                    return hljs.highlightAuto(code).value;
                                },
                                breaks: true,
                                gfm: true
                            });

                            // Load initial content
                            fetch('<%= lesson.DuongDanFile %>')
                                .then(response => response.text())
                                .then(md => {
                                    currentMarkdownContent = md;
                                    const rendered = marked.parse(md);
                                    document.getElementById('renderedContent').innerHTML = rendered;
                                })
                                .catch(err => {
                                    document.getElementById('renderedContent').innerHTML = '<p style="color:red">Không thể hiển thị nội dung Markdown.</p>';
                                });

                            // Editor functionality
                            <% if (user && user.vaiTro === 'Admin') { %>
                            document.getElementById('editBtn').addEventListener('click', function() {
                                if (!isEditing) {
                                    startEditing();
                                }
                            });

                            document.getElementById('saveBtn').addEventListener('click', function() {
                                saveMarkdown();
                            });

                            document.getElementById('cancelBtn').addEventListener('click', function() {
                                cancelEditing();
                            });

                            // Tab switching
                            document.querySelectorAll('.tab-btn').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    const tab = this.dataset.tab;
                                    switchTab(tab);
                                });
                            });

                            // Live preview
                            document.getElementById('markdownTextarea').addEventListener('input', function() {
                                updateLivePreview();
                            });

                            function startEditing() {
                                isEditing = true;
                                document.getElementById('markdownEditor').style.display = 'block';
                                document.getElementById('markdownDisplay').style.display = 'none';
                                document.getElementById('editBtn').style.display = 'none';
                                document.getElementById('markdownTextarea').value = currentMarkdownContent;
                                updateLivePreview();
                            }

                            function cancelEditing() {
                                isEditing = false;
                                document.getElementById('markdownEditor').style.display = 'none';
                                document.getElementById('markdownDisplay').style.display = 'block';
                                document.getElementById('editBtn').style.display = 'inline-flex';
                            }

                            function switchTab(tab) {
                                document.querySelectorAll('.tab-btn').forEach(btn => {
                                    btn.classList.remove('active');
                                });
                                document.querySelector(`[data-tab="${tab}"]`).classList.add('active');

                                if (tab === 'source') {
                                    document.getElementById('editorSource').classList.remove('hidden');
                                    document.getElementById('editorPreview').classList.remove('active');
                                } else {
                                    document.getElementById('editorSource').classList.add('hidden');
                                    document.getElementById('editorPreview').classList.add('active');
                                    updateLivePreview();
                                }
                            }

                            function updateLivePreview() {
                                const content = document.getElementById('markdownTextarea').value;
                                const rendered = marked.parse(content);
                                document.getElementById('livePreview').innerHTML = rendered;
                            }

                            async function saveMarkdown() {
                                const content = document.getElementById('markdownTextarea').value;
                                const saveBtn = document.getElementById('saveBtn');
                                
                                try {
                                    saveBtn.disabled = true;
                                    saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang lưu...';
                                    
                                    const response = await fetch('/learning/<%= lesson.MaBaiHoc %>/edit-markdown', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify({ content: content })
                                    });

                                    if (response.ok) {
                                        currentMarkdownContent = content;
                                        document.getElementById('renderedContent').innerHTML = marked.parse(content);
                                        cancelEditing();
                                        
                                        // Show success message
                                        const originalBtn = document.getElementById('editBtn');
                                        const originalText = originalBtn.innerHTML;
                                        originalBtn.innerHTML = '<i class="fas fa-check"></i> Đã lưu!';
                                        originalBtn.style.background = '#27ae60';
                                        setTimeout(() => {
                                            originalBtn.innerHTML = originalText;
                                            originalBtn.style.background = '#27ae60';
                                        }, 2000);
                                    } else {
                                        throw new Error('Lỗi khi lưu file');
                                    }
                                } catch (error) {
                                    alert('Có lỗi xảy ra khi lưu file: ' + error.message);
                                } finally {
                                    saveBtn.disabled = false;
                                    saveBtn.innerHTML = '<i class="fas fa-save"></i> Lưu thay đổi';
                                }
                            }
                            <% } %>
                        </script>
                    <% } else if (fileExt === 'txt') { %>
                        <div class="converted-content">
                            <div class="panel-content">
                                <pre id="textContent" style="white-space: pre-wrap; font-family: 'Courier New', monospace; background: #f8f9fa; padding: 20px; border-radius: 5px; overflow-x: auto;"></pre>
                            </div>
                        </div>
                        <script>
                            fetch('<%= lesson.DuongDanFile %>')
                                .then(response => response.text())
                                .then(text => {
                                    document.getElementById('textContent').textContent = text;
                                })
                                .catch(err => {
                                    document.getElementById('textContent').textContent = 'Không thể hiển thị nội dung file text.';
                                });
                        </script>
                    <% } else if (imageFormats.includes(fileExt)) { %>
                        <div class="image-preview" style="text-align: center; margin-top: 20px;">
                            <img src="<%= lesson.DuongDanFile %>" alt="Image preview" style="max-width: 100%; height: auto; border-radius: 10px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
                        </div>
                    <% } else if (videoFormats.includes(fileExt)) { %>
                        <div class="video-preview" style="text-align: center; margin-top: 20px;">
                            <video controls style="max-width: 100%; height: auto; border-radius: 10px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
                                <source src="<%= lesson.DuongDanFile %>" type="video/<%= fileExt %>">
                                Trình duyệt của bạn không hỗ trợ phát video.
                            </video>
                        </div>
                    <% } else { %>
                        <div class="file-notice" style="margin: 20px 0; padding: 20px; background: #f8f9fa; border: 1px dashed #dee2e6; border-radius: 10px; text-align: center;">
                            <i class="fas fa-file-alt" style="font-size: 48px; color: #6c757d; margin-bottom: 15px;"></i>
                            <h3 style="color: #495057; margin-bottom: 10px;">File định dạng <%= fileExt.toUpperCase() %></h3>
                            <p style="color: #6c757d; margin-bottom: 15px;">Vui lòng tải file về để xem nội dung</p>
                            <p style="font-size: 14px; color: #868e96;">
                                Tên file: <%= lesson.DuongDanFile.split('/').pop() %>
                            </p>
                        </div>
                    <% } %>
                </div>
                <% } else { %>
                <div class="no-pdf">
                    <p><i class="far fa-file"></i> Không có tài liệu đính kèm cho bài học này.</p>
                </div>
                <% } %>

                <% if (user && user.vaiTro==='Admin' ) { %>
                <div class="practice-actions">
                    <button class="btn-edit" onclick="window.location.href='/learning/<%= lesson.MaBaiHoc %>/edit'">
                        <i class="fas fa-edit"></i> Sửa bài học
                    </button>
                    <button class="btn-delete" onclick="confirmDelete()">
                        <i class="fas fa-trash"></i> Xóa bài học
                    </button>
                </div>
                <% } %>
            </div>
        </div>
    </main>

    <%- include('./partials/footer') %>

    <script>
        function confirmDelete() {
            if (confirm('Bạn có chắc chắn muốn xóa bài học này?')) {
                window.location.href = '/learning/<%= lesson.MaBaiHoc %>/delete';
            }
        }
    </script>
</body>

</html>